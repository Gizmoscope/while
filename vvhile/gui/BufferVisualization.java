/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vvhile.gui;

import vvhile.intrep.ASTCompiler;
import vvhile.basic.language.BasicRuleSet;
import static vvhile.basic.language.BasicRuleSet.STM;
import vvhile.frontend.NonTerminal;
import vvhile.frontend.ParseTree;
import vvhile.frontend.Parser;
import vvhile.frontend.RuleSet;
import vvhile.frontend.Scanner;
import java.awt.Color;
import java.awt.Component;
import java.io.IOException;
import java.io.InputStream;
import java.util.LinkedList;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListModel;
import javax.swing.UIManager;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListDataListener;
import vvhile.util.BoundedBuffer;
import vvhile.util.Experimental;
import vvhile.util.Pair;

/**
 *
 * @author markus
 */
@Experimental
public class BufferVisualization extends javax.swing.JFrame {

    /**
     * Creates new form BufferVisualization
     */
    public BufferVisualization() {
        initComponents();
    }

    private class BufferListModel implements ListModel<JLabel> {

        LinkedList<String> elements = new LinkedList<>();
        int out;

        @Override
        public int getSize() {
            return elements.size();
        }

        @Override
        public JLabel getElementAt(int arg0) {
            JLabel label = new JLabel(elements.get(arg0));
            if (arg0 < out) {
                label.setForeground(Color.red);
            }
            return label;
        }

        @Override
        public void addListDataListener(ListDataListener arg0) {
        }

        @Override
        public void removeListDataListener(ListDataListener arg0) {
        }

    }

    private ASTCompiler astCompiler;

    private void apply(JList list, Object data) {
        if (!(list.getModel() instanceof BufferListModel)) {
            list.setModel(new BufferListModel());
            list.setCellRenderer((JList arg0, Object arg1, int arg2, boolean arg3, boolean arg4) -> (Component) arg0.getModel().getElementAt(arg2));
        }
        BufferListModel model = (BufferListModel) list.getModel();
        Pair p = (Pair) data;
        if ((Boolean) p.second()) {
            new Thread(() -> {
                model.elements.add(p.first().toString());
                listP2A.updateUI();
                listP2P.updateUI();
                listS2P.updateUI();
            }).start();
            synchronized (this) {
                try {
                    wait(200);
                } catch (InterruptedException e) {
                }
            }
        } else {
            model.out++;
        }
    }

    public ChangeListener getChangeListenerS2P() {
        return event -> {
            apply(listS2P, event.getSource());
        };
    }

    public ChangeListener getChangeListenerP2P() {
        return event -> {
            apply(listP2P, event.getSource());
        };
    }

    public ChangeListener getChangeListenerP2A() {
        return event -> {
            apply(listP2A, event.getSource());
        };
    }

    public ChangeListener getChangeListenerStack() {
        return event -> {
            new Thread(() -> {
                listStack.setListData(astCompiler.getStack());
            }).start();
            synchronized (this) {
                try {
                    wait(100);
                } catch (InterruptedException e) {
                }
            }
        };
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listS2P = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listP2P = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listP2A = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        listStack = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("-> Parser ->");

        jScrollPane1.setViewportView(listS2P);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Scanner ->");

        jScrollPane2.setViewportView(listP2P);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("-> ParseTree ->");

        jScrollPane3.setViewportView(listP2A);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("-> ASTComiler");

        jLabel5.setText("Eingabe:");

        jButton1.setText("Compile");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setText("i := n ; s := 0 ; while ( i > 0 ) { s := s + i }");
        jTextField1.setToolTipText("");

        jScrollPane4.setViewportView(listStack);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 494, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jButton1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        RuleSet ruleSet = new BasicRuleSet();
        NonTerminal start = STM;
        final String code = jTextField1.getText();
        InputStream consoleToScanner = new InputStream() {

            int pos = 0;

            @Override
            public int read() throws IOException {
                if (pos < code.length()) {
                    return code.charAt(pos++);
                } else {
                    return -1;
                }
            }
        };

        try {
            Scanner scanner = new Scanner(consoleToScanner, ruleSet);
            BoundedBuffer<Scanner.ScanObject> scannerToParser = new BoundedBuffer<>(1);
            scannerToParser.addListener(getChangeListenerS2P());
            scanner.startScan(scannerToParser);

            Parser parser = new Parser(scannerToParser, ruleSet, BasicRuleSet.STM);
            BoundedBuffer<Parser.ParseObject> parserToParseTree = new BoundedBuffer<>(1);
            parserToParseTree.addListener(getChangeListenerP2P());
            parser.startParsing(start, parserToParseTree);

            ParseTree parseTree = new ParseTree(parserToParseTree);
            BoundedBuffer<Parser.ParseObject> parseTreeToASTCompiler = new BoundedBuffer<>(1);
            parseTreeToASTCompiler.addListener(getChangeListenerP2A());
            parseTree.startRetranslation(parseTreeToASTCompiler);

            astCompiler = new ASTCompiler(parseTreeToASTCompiler, ruleSet);
            BoundedBuffer<Parser.ParseObject> astCompilerToInterpreter = new BoundedBuffer<>(1);
            astCompiler.startCompilation(astCompilerToInterpreter);
            astCompiler.addListener(getChangeListenerStack());

        } catch (IOException e) {
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BufferVisualization.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new BufferVisualization().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JList<String> listP2A;
    private javax.swing.JList<String> listP2P;
    private javax.swing.JList<String> listS2P;
    private javax.swing.JList<String> listStack;
    // End of variables declaration//GEN-END:variables
}
